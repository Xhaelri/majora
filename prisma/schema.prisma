generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(uuid())
  email         String?   @unique
  password      String?
  firstName     String?
  lastName      String?
  name          String?
  emailVerified DateTime?
  image         String?
  address       String?
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isGuest       Boolean   @default(true)
  anonymousId   String?   @unique
  accounts      Account[]
  cart          Cart?
  orders        Order[]
  reviews       Review[]
  sessions      Session[]
}

model Product {
  id               String           @id @default(uuid())
  name             String
  nameAr           String?
  slug             String           @unique
  description      String?
  descriptionAr    String?
  price            Float
  salePrice        Float?
  isLimitedEdition Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  categoryId       String?
  category         Category?        @relation(fields: [categoryId], references: [id])
  variants         ProductVariant[]
  reviews          Review[]
}

model ProductVariant {
  id         String         @id @default(uuid())
  productId  String
  sizeId     String
  colorId    String
  stock      Int
  sku        String?        @unique
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  cartItems  CartItem[]
  orderItems OrderItem[]
  images     ProductImage[]
  color      Color          @relation(fields: [colorId], references: [id])
  product    Product        @relation(fields: [productId], references: [id])
  size       Size           @relation(fields: [sizeId], references: [id])

  @@unique([productId, sizeId, colorId])
}

model ProductImage {
  id        String         @id @default(uuid())
  url       String
  altText   String
  altTextAr String?
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  nameAr    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Size {
  id              String           @id @default(uuid())
  name            String           @unique
  nameAr          String?
  productVariants ProductVariant[]
}

model Color {
  id              String           @id @default(uuid())
  name            String           @unique
  nameAr          String?
  productVariants ProductVariant[]
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id               String         @id @default(uuid())
  cartId           String
  productVariantId String
  quantity         Int            @default(1)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  cart             Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])

  @@unique([cartId, productVariantId])
}

model Order {
  id              String        @id @default(uuid())
  userId          String
  orderDate       DateTime      @default(now())
  status          OrderStatus   @default(PENDING)
  subtotal        Float
  discountAmount  Float?
  shippingCost    Float?
  totalAmount     Float
  shippingAddress String?
  paymentMethod   String?
  discountCodeId  String?
  governorate     String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  discountCode    DiscountCode? @relation(fields: [discountCodeId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
}

model OrderItem {
  id               String         @id @default(uuid())
  orderId          String
  productVariantId String
  quantity         Int
  priceAtPurchase  Float
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  order            Order          @relation(fields: [orderId], references: [id])
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  productId String
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model DiscountCode {
  id             String       @id @default(uuid())
  code           String       @unique
  discountType   DiscountType
  value          Float
  minOrderAmount Float?
  isActive       Boolean      @default(true)
  expiresAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  orders         Order[]
}

model ShippingRate {
  id          String   @id @default(uuid())
  governorate String   @unique
  cost        Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model NewsletterSubscription {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}