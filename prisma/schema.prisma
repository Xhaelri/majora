generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  name          String
  firstName     String
  lastName      String
  phone         String?
  address       String?
  image         String?
  role          Role      @default(USER)  
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  cart          Cart?
  orders        Order[]
  
  @@index([email])
  @@index([role])
  @@index([createdAt])
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  nameAr    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  products  Product[]
  
  @@index([name])
}

model Product {
  id               String           @id @default(uuid())
  name             String
  nameAr           String
  description      String
  descriptionAr    String
  slug             String           @unique
  price            Float
  salePrice        Float?
  isLimitedEdition Boolean          @default(false)
  isAvailable      Boolean          @default(true)
  categoryId       String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  category         Category?        @relation(fields: [categoryId], references: [id])
  variants         ProductVariant[]

  @@index([slug])
  @@index([categoryId])
  @@index([categoryId, price])
  @@index([isLimitedEdition])
  @@index([isAvailable])
  @@index([createdAt])
}

model ProductVariant {
  id        String   @id @default(uuid())
  productId String
  size      String  // "XS", "S", "M", "L", "XL", "XXL"
  color     String  // "Red", "Blue", "Black", "White"
  colorHex  String  // "#FF0000", "#0000FF"
  stock     Int      @default(0)
  images    String[] // ["variant-img1.jpg", "variant-img2.jpg"] - at least 1 required
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, size, color])
  @@index([productId])
  @@index([productId, stock])
  @@index([stock])
  @@index([size])
  @@index([color])
}

model Cart {
  id        String   @id @default(uuid())
  userId    String   @unique
  items     Json     @default("[]")    
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([updatedAt])
}

model Order {
  id                   String      @id @default(uuid())
  userId               String?
  
  // Order details
  items     Json       @default("[]")     
  subtotal             Float
  discountAmount       Float?
  shippingCost         Float?
  totalAmount          Float
  status               OrderStatus @default(PENDING)
  orderType            OrderType   @default(CART)
  isBuyNow             Boolean     @default(false)
  
  // Payment details
  paymentProvider      String?     @default("paymob")
  paymobOrderId        String?     @unique
  merchantOrderId      String?     @unique
  paymentTransactionId String?
  discountCodeId       String?
  
  // Billing address
  billingEmail         String?
  billingFirstName     String?
  billingLastName      String?
  billingPhone         String?
  billingStreet        String?
  billingBuilding      String?
  billingApartment     String?
  billingFloor         String?
  billingCity          String?
  billingState         String?
  billingPostalCode    String?
  billingCountry       String?
  
  orderDate            DateTime    @default(now())
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  user                 User?         @relation(fields: [userId], references: [id])
  discountCode         DiscountCode? @relation(fields: [discountCodeId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([orderDate])
  @@index([billingEmail])
  @@index([paymobOrderId])
  @@index([orderType, isBuyNow])
  @@index([createdAt])
}

model DiscountCode {
  id             String    @id @default(uuid())
  code           String    @unique
  discountType   String?   // "PERCENTAGE" or "FIXED"
  value          Float
  minOrderAmount Float?
  isActive       Boolean   @default(true)
  expiresAt      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  orders         Order[]

  @@index([code])
  @@index([isActive, expiresAt])
  @@index([code, isActive])
}

model ShippingRate {
  id          String   @id @default(uuid())
  governorate String   @unique
  cost        Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([governorate])
}

enum OrderStatus {
  PENDING
  PROCESSING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  FAILED
  REFUNDED
  RETURNED
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum OrderType {
  CART
  BUY_NOW
}